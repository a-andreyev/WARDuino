import{_ as t,o as e,c as i,V as l}from"./chunks/framework.34305d4c.js";const h=JSON.parse('{"title":"Built-in Primitives","description":"","frontmatter":{},"headers":[],"relativePath":"reference/primitives.md","filePath":"reference/primitives.md","lastUpdated":null}'),n={name:"reference/primitives.md"},a=l('<h1 id="built-in-primitives" tabindex="-1">Built-in Primitives <a class="header-anchor" href="#built-in-primitives" aria-label="Permalink to &quot;Built-in Primitives&quot;">â€‹</a></h1><div class="tip custom-block"><p class="custom-block-title">Programming in high-level languages</p><p>Language specific libraries for AssemblyScript and Rust, give access to the built-in primitives. <a href="/WARDuino/guide/get-started.html">This guide</a> has more information on how to get started with them.</p></div><p>The WARDuino virtual machine includes built-in primitives that provide access to hardware and IoT specific functionality to WebAssembly programs.</p><p>The built-in primitives are divided conceptually into different modules, according to the functionality they provide. The primitives are hardware dependent and so have to be implemented for each hardware platform separately. The table below list all modules, and on which platforms they are supported.</p><table><thead><tr><th style="text-align:left;">Module</th><th style="text-align:center;">Arduino</th><th style="text-align:center;">ESP IDF</th><th style="text-align:center;">Zephyr</th></tr></thead><tbody><tr><td style="text-align:left;">analog I/O</td><td style="text-align:center;">âœ…</td><td style="text-align:center;">âž–</td><td style="text-align:center;">ðŸ‘·</td></tr><tr><td style="text-align:left;">digital I/O</td><td style="text-align:center;">âœ…</td><td style="text-align:center;">âœ…</td><td style="text-align:center;">ðŸ‘·</td></tr><tr><td style="text-align:left;">external interrupts</td><td style="text-align:center;">âœ…</td><td style="text-align:center;">âž–</td><td style="text-align:center;">âž–</td></tr><tr><td style="text-align:left;">http</td><td style="text-align:center;">ðŸ‘·</td><td style="text-align:center;">âž–</td><td style="text-align:center;">âž–</td></tr><tr><td style="text-align:left;">mqtt</td><td style="text-align:center;">ðŸ‘·</td><td style="text-align:center;">âž–</td><td style="text-align:center;">âž–</td></tr><tr><td style="text-align:left;">neopixel</td><td style="text-align:center;">ðŸ‘·</td><td style="text-align:center;">âž–</td><td style="text-align:center;">âž–</td></tr><tr><td style="text-align:left;">serial</td><td style="text-align:center;">âœ…</td><td style="text-align:center;">âž–</td><td style="text-align:center;">âž–</td></tr><tr><td style="text-align:left;">spi</td><td style="text-align:center;">âœ…</td><td style="text-align:center;">âž–</td><td style="text-align:center;">âž–</td></tr><tr><td style="text-align:left;">time</td><td style="text-align:center;">âœ…</td><td style="text-align:center;">ðŸ‘·</td><td style="text-align:center;">âž–</td></tr><tr><td style="text-align:left;">wifi</td><td style="text-align:center;">âœ…</td><td style="text-align:center;">âž–</td><td style="text-align:center;">âž–</td></tr></tbody></table><p>âœ… = implemented | ðŸ‘· = partially implemented | âž– = not implemented</p><h2 id="using-primitives" tabindex="-1">Using Primitives <a class="header-anchor" href="#using-primitives" aria-label="Permalink to &quot;Using Primitives&quot;">â€‹</a></h2><p>The primitives can be imported in WebAssembly from the <code>env</code> module.</p><div class="language-wasm"><button title="Copy Code" class="copy"></button><span class="lang">wasm</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">env</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">chip_delay</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> (</span><span style="color:#FFCB6B;">func</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">$delay</span><span style="color:#A6ACCD;"> (</span><span style="color:#FFCB6B;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">$int-&gt;void</span><span style="color:#A6ACCD;">)))</span></span></code></pre></div><h2 id="custom-primitives" tabindex="-1">Custom Primitives <a class="header-anchor" href="#custom-primitives" aria-label="Permalink to &quot;Custom Primitives&quot;">â€‹</a></h2><p>The WARDuino virtual machine is open-source, and developers are encouraged to extend the existing primitives with their own functionality.</p>',11),s=[a];function r(d,o,c,p,y,m){return e(),i("div",null,s)}const u=t(n,[["render",r]]);export{h as __pageData,u as default};
